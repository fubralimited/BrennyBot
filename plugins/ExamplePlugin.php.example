<?php

 /**
  * An example BrennyBot plugin structure. Each of the methods included are
  * called at the times specified in the comments. All methods are optional.
	* @see PluginAbstract
  */
class ExamplePlugin extends PluginAbstract {


 /**
  * Constructor. Called when the plugin is first loaded by the bot. Activity
  * required before the plugin receives any information from the IRC server
  * should be done here. Should call parent::__construct($controller).
  * Informing the controller about any commands which this plugin responds to
  * by default should also be done here.
  *
  * @param $config mixed The configuration element matching the plugin name will
  *                      be passed here. If there isn't one then null will be
  *                      passed.
  * @param $controller BrennyBot Reference to the controlling instance.
  */
	function __construct($config, &$controller) {

		parent::__construct($controller);
	
	}
	
 /**
  * Destructor. Called when the plugin is shut down by the bot; usually because
  * the bot is going offline or restarting, but possibly because the plugins are
  * being reloaded. Tidy up, clear locks, disconnect from APIs and databases
  * here. Do NOT unset the _controller instance variable.
  * Commands which were added using $this->_controller->add_hooked_command()
  * should be un-hooked here.
  */
	function __destruct() {
	
	}

 /**
  * Called when the bot joins a new channel.
  * 
  * @param $channelName string Channel the bot joined
  */
	public function join_channel($channelName) {
	
	}
	
 /**
  * Called when a message is posted to a channel that the bot is in.
  * 
  * @param $fromDetails array Details of the user the message comes from. See
  *                           BrennyBot::parse_user_ident() for details.
  * @param $channelName string Channel the message was posted in.
  * @param $message string The actual message.
  */
	public function channel_message(array $fromDetails, $channelName, $message) {
	
	}

 /**
  * Called when a message is sent directly to the bot.
  *
  * @param $fromDetails array Details of the user the message comes from. See
  *                           BrennyBot::parse_user_ident() for details.
  * @param $message string The actual message.
  */
	public function private_message(array $fromDetails, $message) {
	
	}
	
 /**
  * Called when a system message (other than PING and ERROR) is received.
  *
  * @param $message string The full message.
  */
	public function data_message($message) {

	}
	
 /**
  * Called on every loop around BrennyBot::main() (roughly every 0.25 seconds).
  * Any activity which does not require or respond to server input should be
  * carried out here.
  */
	public function tick() {
	
	}

 /**
  * Called when a message is sent from the bot to the server. Note: the full raw
  * message is passed to this method.
  *
  * @param $message string The full message.
  */
	public function send_message($message) {
	
	}

 /**
  * Called when a restart command is recieved by the bot. The method is called
  * while still connected to the IRC server and in rooms, just before channel
  * state is saved. Should be used to save data which will be needed when the
  * plugin starts up again.
  */
	public function bot_restart() {
	
	}

 /**
  * Called just before a /QUIT command is sent to the IRC server.
  *
  * @param $quitReason string The quit message which will be sent  to the server.
  */
	public function send_quit($quitReason) {
	
	}
	
}